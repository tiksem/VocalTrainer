/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */
#pragma once

#ifndef VOCALTRAINER_APP_AUDIO_DEVICE_PROVIDER_PROXY_H
#define VOCALTRAINER_APP_AUDIO_DEVICE_PROVIDER_PROXY_H

#include <jni.h>
#include <assert.h>
#include "jnihelper.h"


class AudioDeviceProviderProxy {

public:
    static constexpr auto FULL_CLASS_NAME = "com/neborosoft/vx/logic/AudioDeviceProvider";



public:

    static bool initClazz(JNIEnv* env);

    static void releaseClazz(JNIEnv* env);

    static void assertInited(JNIEnv* env) {
        auto initClazzSuccess = initClazz(env);
        assert(initClazzSuccess);
    }

    // construct: public AudioDeviceProvider(android.content.Context context)
    static jobject newInstance(JNIEnv* env, jobject context) {
        assertInited(env);
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0, context);
    }


    // method: public final int getOutputDeviceId()
    static jint getOutputDeviceId(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_getOutputDeviceId_0);
    }

    // method: public final int getInputDeviceId()
    static jint getInputDeviceId(JNIEnv* env, jobject thiz) {
        assertInited(env);
        return env->CallIntMethod(thiz, getClassInitState().sMethod_getInputDeviceId_0);
    }


    // ====== jni helper ======
private:
    ::jenny::LocalRef<jobject> _local;
    ::jenny::GlobalRef<jobject> _global;

public:

    // jni helper
    ::jenny::LocalRef<jobject> getThis(bool owned = true) const {
        if (_local) {
            if (owned) {
                return _local;
            } else {
                return ::jenny::LocalRef<jobject>(_local.get(), false);
            }
        } else {
            return _global.toLocal();
        }
    }

    // jni helper constructors
    AudioDeviceProviderProxy(jobject ref, bool owned = false): _local(ref, owned) {
        assertInited(::jenny::Env().get());
    }

    AudioDeviceProviderProxy(::jenny::LocalRef<jobject> ref): _local(std::move(ref)) {
        assertInited(::jenny::Env().get());
    }

    AudioDeviceProviderProxy(::jenny::GlobalRef<jobject> ref): _global(std::move(ref)) {
        assertInited(::jenny::Env().get());
    }

    // construct: public AudioDeviceProvider(android.content.Context context)
    static AudioDeviceProviderProxy newInstance(const ::jenny::LocalRef<jobject>& context) {
        ::jenny::Env env; assertInited(env.get());
        return env->NewObject(getClassInitState().sClazz, getClassInitState().sConstruct_0, context.get());
    }


    // for jni helper
    // method: public final int getOutputDeviceId()
    jint getOutputDeviceId() const {
        ::jenny::Env env; jobject thiz = getThis(false).get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_getOutputDeviceId_0);
    }

    // for jni helper
    // method: public final int getInputDeviceId()
    jint getInputDeviceId() const {
        ::jenny::Env env; jobject thiz = getThis(false).get();
        return env->CallIntMethod(thiz, getClassInitState().sMethod_getInputDeviceId_0);
    }



private:
    struct ClassInitState {
        bool sInited = false;

        jclass sClazz = nullptr;
        jmethodID sConstruct_0 = nullptr;

        jmethodID sMethod_getOutputDeviceId_0 = nullptr;
        jmethodID sMethod_getInputDeviceId_0 = nullptr;


    }; // endof struct ClassInitState

    static inline ClassInitState& getClassInitState() {
        static ClassInitState classInitState;
        return classInitState;
    }

};






/*static*/ inline bool AudioDeviceProviderProxy::initClazz(JNIEnv* env) {
#define JENNY_CHECK_NULL(val)                      \
       do {                                        \
           if ((val) == nullptr) {                 \
               env->ExceptionDescribe();           \
               return false;                       \
           }                                       \
       } while(false)

    auto& state = getClassInitState();
    if (!state.sInited) {
        auto clazz = env->FindClass(FULL_CLASS_NAME);
        JENNY_CHECK_NULL(clazz);
        state.sClazz = reinterpret_cast<jclass>(env->NewGlobalRef(clazz));
        env->DeleteLocalRef(clazz);
        JENNY_CHECK_NULL(state.sClazz);

        state.sConstruct_0 = env->GetMethodID(state.sClazz, "<init>", "(Landroid/content/Context;)V");
        JENNY_CHECK_NULL(state.sConstruct_0);


        state.sMethod_getOutputDeviceId_0 = env->GetMethodID(state.sClazz, "getOutputDeviceId", "()I");
        JENNY_CHECK_NULL(state.sMethod_getOutputDeviceId_0);

        state.sMethod_getInputDeviceId_0 = env->GetMethodID(state.sClazz, "getInputDeviceId", "()I");
        JENNY_CHECK_NULL(state.sMethod_getInputDeviceId_0);



        state.sInited = true;
    }
#undef JENNY_CHECK_NULL
    return true;
}

/*static*/ void AudioDeviceProviderProxy::releaseClazz(JNIEnv* env) {
    auto& state = getClassInitState();
    if (state.sInited) {
        env->DeleteGlobalRef(state.sClazz);
        state.sInited = false;
    }
}

#endif // VOCALTRAINER_APP_AUDIO_DEVICE_PROVIDER_PROXY_H